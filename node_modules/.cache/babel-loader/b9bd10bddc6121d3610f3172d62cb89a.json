{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekpatel/Documents/web/newest/hacker-news/src/context.js\";\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { SET_LOADING, SET_STORIES, REMOVE_STORY, HANDLE_PAGE, HANDLE_SEARCH } from './actions';\nimport reducer from './reducer';\nconst API_ENDPOINT = 'https://hn.algolia.com/api/v1/search?';\nconst initialState = {\n  isLoading: true,\n  hits: [],\n  query: 'react',\n  page: 0,\n  nbPages: 0\n};\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchStories = async url => {\n    dispatch({\n      type: SET_LOADING\n    });\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      dispatch({\n        type: SET_STORIES,\n        payload: {\n          hits: data.hits,\n          nbPages: data.nbPages\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const removeStory = id => {\n    dispatch({\n      type: REMOVE_STORY,\n      payload: id\n    });\n  };\n\n  const handleSearch = query => {\n    dispatch({\n      type: HANDLE_SEARCH,\n      payload: query\n    });\n  };\n\n  const handlePage = value => {\n    dispatch({\n      type: HANDLE_PAGE,\n      payload: value\n    });\n  };\n\n  useEffect(() => {\n    fetchStories(`${API_ENDPOINT}query=${state.query}&page=${state.page}`);\n  }, [state.query, state.page]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: { ...state,\n      removeStory,\n      handleSearch,\n      handlePage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/abhishekpatel/Documents/web/newest/hacker-news/src/context.js"],"names":["React","useContext","useEffect","useReducer","SET_LOADING","SET_STORIES","REMOVE_STORY","HANDLE_PAGE","HANDLE_SEARCH","reducer","API_ENDPOINT","initialState","isLoading","hits","query","page","nbPages","AppContext","createContext","AppProvider","children","state","dispatch","fetchStories","url","type","response","fetch","data","json","payload","error","console","log","removeStory","id","handleSearch","handlePage","value","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,UAAvC,QAAyD,OAAzD;AAEA,SACEC,WADF,EAEEC,WAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,WANP;AAOA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,YAAY,GAAG,uCAArB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,KAAK,EAAE,OAHY;AAInBC,EAAAA,IAAI,EAAE,CAJa;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAQA,MAAMC,UAAU,GAAGjB,KAAK,CAACkB,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,UAAU,CAACM,OAAD,EAAUE,YAAV,CAApC;;AAEA,QAAMY,YAAY,GAAG,MAAOC,GAAP,IAAe;AAClCF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAErB;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMsB,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACA,YAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAP,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEpB,WADC;AAEPyB,QAAAA,OAAO,EAAE;AAAEjB,UAAAA,IAAI,EAAEe,IAAI,CAACf,IAAb;AAAmBG,UAAAA,OAAO,EAAEY,IAAI,CAACZ;AAAjC;AAFF,OAAD,CAAR;AAID,KAPD,CAOE,OAAOe,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAZD;;AAcA,QAAMG,WAAW,GAAIC,EAAD,IAAQ;AAC1Bb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEnB,YAAR;AAAsBwB,MAAAA,OAAO,EAAEK;AAA/B,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAItB,KAAD,IAAW;AAC9BQ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEjB,aAAR;AAAuBsB,MAAAA,OAAO,EAAEhB;AAAhC,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMuB,UAAU,GAAIC,KAAD,IAAW;AAC5BhB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAElB,WAAR;AAAqBuB,MAAAA,OAAO,EAAEQ;AAA9B,KAAD,CAAR;AACD,GAFD;;AAGApC,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,YAAY,CAAE,GAAEb,YAAa,SAAQW,KAAK,CAACP,KAAM,SAAQO,KAAK,CAACN,IAAK,EAAxD,CAAZ;AACD,GAFQ,EAEN,CAACM,KAAK,CAACP,KAAP,EAAcO,KAAK,CAACN,IAApB,CAFM,CAAT;AAIA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE,EAAE,GAAGM,KAAL;AAAYa,MAAAA,WAAZ;AAAyBE,MAAAA,YAAzB;AAAuCC,MAAAA;AAAvC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGjB,QAHH,CADF;AAOD,CArCD,C,CAsCA;;;AACA,OAAO,MAAMmB,gBAAgB,GAAG,MAAM;AACpC,SAAOtC,UAAU,CAACgB,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useContext, useEffect, useReducer } from 'react'\n\nimport {\n  SET_LOADING,\n  SET_STORIES,\n  REMOVE_STORY,\n  HANDLE_PAGE,\n  HANDLE_SEARCH,\n} from './actions'\nimport reducer from './reducer'\n\nconst API_ENDPOINT = 'https://hn.algolia.com/api/v1/search?'\n\nconst initialState = {\n  isLoading: true,\n  hits: [],\n  query: 'react',\n  page: 0,\n  nbPages: 0,\n}\n\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const fetchStories = async (url) => {\n    dispatch({ type: SET_LOADING })\n    try {\n      const response = await fetch(url)\n      const data = await response.json()\n      dispatch({\n        type: SET_STORIES,\n        payload: { hits: data.hits, nbPages: data.nbPages },\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const removeStory = (id) => {\n    dispatch({ type: REMOVE_STORY, payload: id })\n  }\n  const handleSearch = (query) => {\n    dispatch({ type: HANDLE_SEARCH, payload: query })\n  }\n  const handlePage = (value) => {\n    dispatch({ type: HANDLE_PAGE, payload: value })\n  }\n  useEffect(() => {\n    fetchStories(`${API_ENDPOINT}query=${state.query}&page=${state.page}`)\n  }, [state.query, state.page])\n\n  return (\n    <AppContext.Provider\n      value={{ ...state, removeStory, handleSearch, handlePage }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"]},"metadata":{},"sourceType":"module"}